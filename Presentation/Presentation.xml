<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Presentation</name>
    </assembly>
    <members>
        <member name="T:Presentation.Controllers.ContractController">
            <summary>
            The users controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.ContractController.#ctor(MediatR.ISender)">
            <summary>
            Initializes a new instance of the <see cref="T:Presentation.Controllers.ContractController"/> class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Presentation.Controllers.ContractController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all of the contracts.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of contract.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the contract with the specified identifier, if it exists.
            </summary>
            <param name="contractId">The contract identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The contract with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.Create(Business.CQRS.ContractUnit.Commands.CreateContract.CreateContractRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new contract based on the specified request.
            </summary>
            <param name="request">The create contract request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created contract.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.Update(System.Guid,Business.CQRS.ContractUnit.Commands.UpdateContract.UpdateContractRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the contract with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="contractId">The contract identifier.</param>
            <param name="request">The update contract request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete the contract with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="contractId">The contract identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="T:Presentation.Controllers.CustomerController">
            <summary>
            The users controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.#ctor(MediatR.ISender)">
            <summary>
            Initializes a new instance of the <see cref="T:Presentation.Controllers.CustomerController"/> class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all of the customers.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of customer.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the customer with the specified identifier, if it exists.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The customer with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.Create(Business.CQRS.CustomerUnit.Commands.CreateCustomer.CreateCustomerRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new customer based on the specified request.
            </summary>
            <param name="request">The create customer request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created customer.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.Update(System.Guid,Business.CQRS.CustomerUnit.Commands.UpdateCustomer.UpdateCustomerRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the customer with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="request">The update customer request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete the customer with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
    </members>
</doc>
