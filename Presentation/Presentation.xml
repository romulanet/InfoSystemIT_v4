<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Presentation</name>
    </assembly>
    <members>
        <member name="T:Presentation.Controllers.ContractController">
            <summary>
            The users controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.ContractController.#ctor(MediatR.ISender)">
            <summary>
            Initializes a new instance of the <see cref="T:Presentation.Controllers.ContractController"/> class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Presentation.Controllers.ContractController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all of the contracts.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of contract.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the contract with the specified identifier, if it exists.
            </summary>
            <param name="contractId">The contract identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The contract with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.GetByIdIncludeProject(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the contract with the specified identifier include projects, if it exists.
            </summary>
            <param name="contractId">The contract identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The contract with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.Create(Business.CQRS.ContractUnit.Commands.CreateContract.CreateContractRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new contract based on the specified request.
            </summary>
            <param name="request">The create contract request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created contract.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.Update(System.Guid,Business.CQRS.ContractUnit.Commands.UpdateContract.UpdateContractRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the contract with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="contractId">The contract identifier.</param>
            <param name="request">The update contract request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.ContractController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete the contract with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="contractId">The contract identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="T:Presentation.Controllers.CustomerController">
            <summary>
            The users controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.#ctor(MediatR.ISender)">
            <summary>
            Initializes a new instance of the <see cref="T:Presentation.Controllers.CustomerController"/> class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all of the customers.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of customer.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the customer with the specified identifier, if it exists.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The customer with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.GetByIdIncludeContract(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the customer with the specified identifier incluse contracts, if it exists.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The customer with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.Create(Business.CQRS.CustomerUnit.Commands.CreateCustomer.CreateCustomerRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new customer based on the specified request.
            </summary>
            <param name="request">The create customer request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created customer.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.Update(System.Guid,Business.CQRS.CustomerUnit.Commands.UpdateCustomer.UpdateCustomerRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the customer with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="request">The update customer request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.CustomerController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete the customer with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="customerId">The customer identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="T:Presentation.Controllers.EmployeeController">
            <summary>
            The users controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.EmployeeController.#ctor(MediatR.ISender)">
            <summary>
            Initializes a new instance of the <see cref="T:Presentation.Controllers.ContractController"/> class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Presentation.Controllers.EmployeeController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all of the employees.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of employee.</returns>
        </member>
        <member name="M:Presentation.Controllers.EmployeeController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the employee with the specified identifier, if it exists.
            </summary>
            <param name="employeeId">The employee identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The employee with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.EmployeeController.GetByIdIncludeTask(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the employee with the specified identifier include Task, if it exists.
            </summary>
            <param name="employeeId">The employee identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The employee with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.EmployeeController.Create(Business.CQRS.EmployeeUnit.Commands.CreateEmployee.CreateEmployeeRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new employee based on the specified request.
            </summary>
            <param name="request">The create employee request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created employee.</returns>
        </member>
        <member name="M:Presentation.Controllers.EmployeeController.Update(System.Guid,Business.CQRS.EmployeeUnit.Commands.UpdateEmployee.UpdateEmployeeRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the employee with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="employeeId">The employee identifier.</param>
            <param name="request">The update employee request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.EmployeeController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete the employee with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="employeeId">The employee identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="T:Presentation.Controllers.ProjectController">
            <summary>
            The users controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.ProjectController.#ctor(MediatR.ISender)">
            <summary>
            Initializes a new instance of the <see cref="T:Presentation.Controllers.ProjectController"/> class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Presentation.Controllers.ProjectController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all of the projects.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of project.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the project with the specified identifier, if it exists.
            </summary>
            <param name="projectId">The project identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The project with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectController.GetByIdIncludeTask(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the project with the specified identifier include tasks, if it exists.
            </summary>
            <param name="projectId">The project identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The project with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectController.Create(Business.CQRS.ProjectUnit.Commands.CreateProject.CreateProjectRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new project based on the specified request.
            </summary>
            <param name="request">The create project request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created project.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectController.Update(System.Guid,Business.CQRS.ProjectUnit.Commands.UpdateProject.UpdateProjectRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the project with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="projectId">The project identifier.</param>
            <param name="request">The update project request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete the project with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="projectId">The project identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="T:Presentation.Controllers.ProjectTaskController">
            <summary>
            The users controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.ProjectTaskController.#ctor(MediatR.ISender)">
            <summary>
            Initializes a new instance of the <see cref="T:Presentation.Controllers.ContractController"/> class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Presentation.Controllers.ProjectTaskController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all of the prjectTasks.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of prjectTask.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectTaskController.GetActive(System.Threading.CancellationToken)">
            <summary>
            Get all active prjectTasks.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of prjectTask.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectTaskController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the prjectTask with the specified identifier, if it exists.
            </summary>
            <param name="prjectTaskId">The prjectTask identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The prjectTask with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectTaskController.Create(Business.CQRS.ProjectTaskUnit.Commands.CreateProjectTask.CreateProjectTaskRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new prjectTask based on the specified request.
            </summary>
            <param name="request">The create prjectTask request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created prjectTask.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectTaskController.Update(System.Guid,Business.CQRS.ProjectTaskUnit.Commands.UpdateProjectTask.UpdateProjectTaskRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the prjectTask with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="prjectTaskId">The prjectTask identifier.</param>
            <param name="request">The update prjectTask request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectTaskController.UpdateStatus(System.Guid,Business.CQRS.ProjectTaskUnit.Commands.UpdateProjectTask.UpdateProjectTaskRequest,System.Threading.CancellationToken)">
            <summary>
            Update status the prjectTask with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="prjectTaskId">The prjectTask identifier.</param>
            <param name="request">The update prjectTask request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.ProjectTaskController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete the prjectTask with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="prjectTaskId">The prjectTask identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="T:Presentation.Controllers.TeamController">
            <summary>
            The users controller.
            </summary>
        </member>
        <member name="M:Presentation.Controllers.TeamController.#ctor(MediatR.ISender)">
            <summary>
            Initializes a new instance of the <see cref="T:Presentation.Controllers.ContractController"/> class.
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Presentation.Controllers.TeamController.Get(System.Threading.CancellationToken)">
            <summary>
            Gets all of the teams.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The collection of team.</returns>
        </member>
        <member name="M:Presentation.Controllers.TeamController.GetById(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the team with the specified identifier, if it exists.
            </summary>
            <param name="teamId">The team identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The team with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.TeamController.GetByIdIncludeProject(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the team with the specified identifier include project, if it exists.
            </summary>
            <param name="teamId">The team identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The team with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.TeamController.GetByIdIncludeEmployee(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Gets the team with the specified identifier include employee, if it exists.
            </summary>
            <param name="teamId">The team identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The team with the specified identifier, if it exists.</returns>
        </member>
        <member name="M:Presentation.Controllers.TeamController.Create(Business.CQRS.TeamUnit.Commands.CreateTeam.CreateTeamRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new team based on the specified request.
            </summary>
            <param name="request">The create team request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The newly created team.</returns>
        </member>
        <member name="M:Presentation.Controllers.TeamController.Update(System.Guid,Business.CQRS.TeamUnit.Commands.UpdateTeam.UpdateTeamRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the team with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="teamId">The team identifier.</param>
            <param name="request">The update team request.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
        <member name="M:Presentation.Controllers.TeamController.Delete(System.Guid,System.Threading.CancellationToken)">
            <summary>
            Delete the team with the specified identifier based on the specified request, if it exists.
            </summary>
            <param name="teamId">The team identifier.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>No content.</returns>
        </member>
    </members>
</doc>
