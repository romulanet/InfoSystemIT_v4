// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(DataDBContext))]
    [Migration("20230524164124_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContractDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ContractTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ContractTotalCost")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Contracts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6442d3ea-986d-4ed0-b249-6993fa75ed83"),
                            ContractDescription = "Разработка ПО.Дмитрий Загородский",
                            ContractTitle = "Разработка ИС для Экосистем",
                            ContractTotalCost = "40 млн. руб",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7052),
                            CustomerId = new Guid("7df41162-1895-48d4-90ed-321e4291789e"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7053)
                        },
                        new
                        {
                            Id = new Guid("53b08e3d-7620-4f73-87ee-0b2d2686c179"),
                            ContractDescription = "Обновление ИС Петр Васнецов",
                            ContractTitle = "Обновление ИС Энергопроект",
                            ContractTotalCost = "20 млн. руб",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7058),
                            CustomerId = new Guid("a8fd7901-4a88-4199-a08c-2ba723d094ea"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7059)
                        },
                        new
                        {
                            Id = new Guid("3e53a63a-cd4c-49fd-816d-d8d5d136dce4"),
                            ContractDescription = "Реинжениринг ИС. Василий Колыванов",
                            ContractTitle = "Реинжениринг ИС Смарт-Решения",
                            ContractTotalCost = "20 млн. руб",
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7062),
                            CustomerId = new Guid("7fa2a4b2-c04c-4f2e-8e32-218a60914684"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7063)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CustomerCompanyTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CustomerCountry")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("CustomerFName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerLName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerMName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerMailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerPostAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CustomerTelNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7df41162-1895-48d4-90ed-321e4291789e"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(6331),
                            CustomerCompanyTitle = "Экосистемы",
                            CustomerCountry = "Россия",
                            CustomerFName = "Дмитрий",
                            CustomerLName = "Загородский",
                            CustomerMName = "Витальевич",
                            CustomerMailAddress = "EcoSystem@eco.ru",
                            CustomerPostAddress = "г. Москва пр. Ленина 21 офис 14",
                            CustomerTelNumber = "89035678945",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(6334)
                        },
                        new
                        {
                            Id = new Guid("a8fd7901-4a88-4199-a08c-2ba723d094ea"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(6351),
                            CustomerCompanyTitle = "Энергопроект",
                            CustomerCountry = "Россия",
                            CustomerFName = "Петр",
                            CustomerLName = "Васнецов",
                            CustomerMName = "Петрович",
                            CustomerMailAddress = "energoProject@ep.ru",
                            CustomerPostAddress = "г. Воронеж ул. Воронина 56 офис 21",
                            CustomerTelNumber = "8910567890",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(6351)
                        },
                        new
                        {
                            Id = new Guid("7fa2a4b2-c04c-4f2e-8e32-218a60914684"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(6355),
                            CustomerCompanyTitle = "Смарт-Решения",
                            CustomerCountry = "Россия",
                            CustomerFName = "Василий",
                            CustomerLName = "Колыванов",
                            CustomerMName = "Иванович",
                            CustomerMailAddress = "smartD@sd.ru",
                            CustomerPostAddress = "г.Калуга ул. Ковалёва 15 офис 56",
                            CustomerTelNumber = "8916766891",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(6356)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EmployeeFName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeJobTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmployeeLName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeMName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeMailAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeePostAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmployeeTelNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("64c2f517-4c27-4e23-adbb-70077bc80834"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9244),
                            EmployeeFName = "Дмитрий",
                            EmployeeJobTitle = "Програмист",
                            EmployeeLName = "Коренков",
                            EmployeeMName = "Васильевич",
                            EmployeeMailAddress = "korenkov@prog.ru",
                            EmployeePostAddress = "г.Москва пр. Маркса 21 ",
                            EmployeeTelNumber = "89056673245",
                            TeamId = new Guid("9e1257c8-00d1-4ba9-80af-f84b8e29431a"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9245)
                        },
                        new
                        {
                            Id = new Guid("d3223d1e-7ccd-4384-ac2c-734634e7b7f3"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9251),
                            EmployeeFName = "Виталий",
                            EmployeeJobTitle = "Аналитик",
                            EmployeeLName = "Валежник",
                            EmployeeMName = "Витальевич",
                            EmployeeMailAddress = "korenkov@prog.ru",
                            EmployeePostAddress = "г.Уфа ул. Ленина 14 ",
                            EmployeeTelNumber = "89076222241",
                            TeamId = new Guid("9e1257c8-00d1-4ba9-80af-f84b8e29431a"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9251)
                        },
                        new
                        {
                            Id = new Guid("ec21ec2e-fc34-4235-9575-066f56c49f5f"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9255),
                            EmployeeFName = "Андрей",
                            EmployeeJobTitle = "Менеджер проекта",
                            EmployeeLName = "Паринков",
                            EmployeeMName = "Витальевич",
                            EmployeeMailAddress = "parinkov@prog.ru",
                            EmployeePostAddress = "г.Мытищи ул. Вологда 33",
                            EmployeeTelNumber = "8970545821",
                            TeamId = new Guid("1c29869d-49e6-4a8e-a1eb-8773497e80fe"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9255)
                        },
                        new
                        {
                            Id = new Guid("33d85a99-bda5-4aca-8904-ece3cb1084ea"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9258),
                            EmployeeFName = "Пётр",
                            EmployeeJobTitle = "Дизайнер",
                            EmployeeLName = "Гордеев",
                            EmployeeMName = "Андреевич",
                            EmployeeMailAddress = "parinkov@prog.ru",
                            EmployeePostAddress = "г.Мытищи ул. Вологда 33",
                            EmployeeTelNumber = "8970545821",
                            TeamId = new Guid("1c29869d-49e6-4a8e-a1eb-8773497e80fe"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9258)
                        },
                        new
                        {
                            Id = new Guid("554644c6-be02-42b2-84c0-cb4faec335bd"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9261),
                            EmployeeFName = "Иван",
                            EmployeeJobTitle = "Аналитик",
                            EmployeeLName = "Василевский",
                            EmployeeMName = "Васильевич",
                            EmployeeMailAddress = "vasilevsky@prog.ru",
                            EmployeePostAddress = "г.Мытищи ул. Ленина 54",
                            EmployeeTelNumber = "8971567821",
                            TeamId = new Guid("f97fab25-21de-44cb-b6c2-5f1db493d614"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9261)
                        },
                        new
                        {
                            Id = new Guid("d78fbbe4-7447-4d05-833c-5eeb3950e0d5"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9264),
                            EmployeeFName = "Ольга",
                            EmployeeJobTitle = "Програмист",
                            EmployeeLName = "Гордеева",
                            EmployeeMName = "Андреевна",
                            EmployeeMailAddress = "o.gordeeva@prog.ru",
                            EmployeePostAddress = "г.Москва пр. Мира 33 кв.234",
                            EmployeeTelNumber = "8956789045",
                            TeamId = new Guid("f97fab25-21de-44cb-b6c2-5f1db493d614"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(9264)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ContractId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProjectDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ProjectFinishData")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ProjectStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectTimeSpent")
                        .HasColumnType("longtext");

                    b.Property<string>("ProjectTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProjectType")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("char(36)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1e9c86b9-5976-4713-8c01-1601b74e9d37"),
                            ContractId = new Guid("6442d3ea-986d-4ed0-b249-6993fa75ed83"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7597),
                            ProjectDescription = "Разработка ИС, Разработка и развёртывание",
                            ProjectFinishData = new DateTime(2023, 9, 21, 0, 0, 0, 0, DateTimeKind.Local),
                            ProjectStatus = "InProcess",
                            ProjectTimeSpent = "300 ч",
                            ProjectTitle = "Разработка ИС для Экосистем",
                            ProjectType = "Разработка ИС",
                            TeamId = new Guid("9e1257c8-00d1-4ba9-80af-f84b8e29431a"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7598)
                        },
                        new
                        {
                            Id = new Guid("94b1f1ac-30ee-45f8-929a-ad77ca814000"),
                            ContractId = new Guid("53b08e3d-7620-4f73-87ee-0b2d2686c179"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7654),
                            ProjectDescription = "Обновление ИС, Обновление и тестирование",
                            ProjectFinishData = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            ProjectStatus = "InProcess",
                            ProjectTimeSpent = "150 ч",
                            ProjectTitle = "Обновление ИС Энергопроект",
                            ProjectType = "Обновление ИС",
                            TeamId = new Guid("1c29869d-49e6-4a8e-a1eb-8773497e80fe"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7655)
                        },
                        new
                        {
                            Id = new Guid("97d74d89-f2db-4cf9-b4c4-1d2d52ded14e"),
                            ContractId = new Guid("3e53a63a-cd4c-49fd-816d-d8d5d136dce4"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7662),
                            ProjectDescription = "Реинжениринг ИС, Реинжениринг и развёртывание",
                            ProjectFinishData = new DateTime(2023, 10, 31, 0, 0, 0, 0, DateTimeKind.Local),
                            ProjectStatus = "InProcess",
                            ProjectTimeSpent = "400 ч",
                            ProjectTitle = "Реинжениринг ИС Смарт-Решения",
                            ProjectType = "Реинжениринг ИС",
                            TeamId = new Guid("f97fab25-21de-44cb-b6c2-5f1db493d614"),
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(7663)
                        });
                });

            modelBuilder.Entity("Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("TaskDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("TaskFinishData")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("longtext");

                    b.Property<string>("TaskTimeSpent")
                        .HasColumnType("longtext");

                    b.Property<string>("TaskTitle")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectTasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("278c74e0-bfc0-48c0-8090-ee23cf303dae"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 14, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8188),
                            EmployeeId = new Guid("d3223d1e-7ccd-4384-ac2c-734634e7b7f3"),
                            ProjectId = new Guid("1e9c86b9-5976-4713-8c01-1601b74e9d37"),
                            TaskDescription = "Моделирование БД для разработки по проекту Экосистем",
                            TaskFinishData = new DateTime(2023, 6, 13, 19, 41, 23, 972, DateTimeKind.Local).AddTicks(8192),
                            TaskStatus = "Stopped",
                            TaskTimeSpent = "12 ч",
                            TaskTitle = "Моделирование БД",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 17, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8189)
                        },
                        new
                        {
                            Id = new Guid("2f560daf-fd18-4320-addf-a160f65da673"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 14, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8196),
                            EmployeeId = new Guid("d3223d1e-7ccd-4384-ac2c-734634e7b7f3"),
                            ProjectId = new Guid("1e9c86b9-5976-4713-8c01-1601b74e9d37"),
                            TaskDescription = "Проектирование ИС по проекту Экосистем",
                            TaskFinishData = new DateTime(2023, 7, 3, 19, 41, 23, 972, DateTimeKind.Local).AddTicks(8198),
                            TaskStatus = "Stopped",
                            TaskTimeSpent = "12 ч",
                            TaskTitle = "Проектирование ИС",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 23, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8197)
                        },
                        new
                        {
                            Id = new Guid("38c87236-80b8-471e-bad4-24c318ba022f"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 14, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8233),
                            EmployeeId = new Guid("64c2f517-4c27-4e23-adbb-70077bc80834"),
                            ProjectId = new Guid("1e9c86b9-5976-4713-8c01-1601b74e9d37"),
                            TaskDescription = "Тестирование ПО по проекту Экосистем",
                            TaskFinishData = new DateTime(2023, 6, 7, 19, 41, 23, 972, DateTimeKind.Local).AddTicks(8236),
                            TaskStatus = "Stopped",
                            TaskTimeSpent = "9 ч",
                            TaskTitle = "Тестирование ПО",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 20, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8234)
                        },
                        new
                        {
                            Id = new Guid("e3e3675a-f500-4f8b-8a44-35a07b540300"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 14, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8238),
                            EmployeeId = new Guid("33d85a99-bda5-4aca-8904-ece3cb1084ea"),
                            ProjectId = new Guid("94b1f1ac-30ee-45f8-929a-ad77ca814000"),
                            TaskDescription = "Разработка UI по проекту Энергопроект",
                            TaskFinishData = new DateTime(2023, 5, 22, 19, 41, 23, 972, DateTimeKind.Local).AddTicks(8241),
                            TaskStatus = "Finished",
                            TaskTimeSpent = "3 ч",
                            TaskTitle = "Разработка UI",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 22, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8239)
                        },
                        new
                        {
                            Id = new Guid("d2016c56-3c07-47d6-8e63-124847836a6a"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 14, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8245),
                            EmployeeId = new Guid("ec21ec2e-fc34-4235-9575-066f56c49f5f"),
                            ProjectId = new Guid("94b1f1ac-30ee-45f8-929a-ad77ca814000"),
                            TaskDescription = "Разработка ТЗ по проекту Энергопроект",
                            TaskFinishData = new DateTime(2023, 5, 22, 19, 41, 23, 972, DateTimeKind.Local).AddTicks(8248),
                            TaskStatus = "Finished",
                            TaskTimeSpent = "12 ч",
                            TaskTitle = "Разработка ТЗ",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 22, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8246)
                        },
                        new
                        {
                            Id = new Guid("9980061a-f8b1-4149-bfed-84dc8d702527"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 10, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8250),
                            EmployeeId = new Guid("554644c6-be02-42b2-84c0-cb4faec335bd"),
                            ProjectId = new Guid("97d74d89-f2db-4cf9-b4c4-1d2d52ded14e"),
                            TaskDescription = "Разработка ТЗ по проекту Смарт-Решения",
                            TaskFinishData = new DateTime(2023, 6, 18, 19, 41, 23, 972, DateTimeKind.Local).AddTicks(8252),
                            TaskStatus = "Stopped",
                            TaskTimeSpent = "6 ч",
                            TaskTitle = "Разработка ТЗ",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 22, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8250)
                        },
                        new
                        {
                            Id = new Guid("0f886c20-33e8-4fd8-a41c-3bf705d03c47"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 8, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8254),
                            EmployeeId = new Guid("d78fbbe4-7447-4d05-833c-5eeb3950e0d5"),
                            ProjectId = new Guid("97d74d89-f2db-4cf9-b4c4-1d2d52ded14e"),
                            TaskDescription = "Разработка ИС по проекту Смарт-Решения",
                            TaskFinishData = new DateTime(2023, 6, 23, 19, 41, 23, 972, DateTimeKind.Local).AddTicks(8256),
                            TaskStatus = "InProcess",
                            TaskTimeSpent = "10 ч",
                            TaskTitle = "Разработка ИС",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 22, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8255)
                        },
                        new
                        {
                            Id = new Guid("12a1f7cd-db28-4fd1-a63f-8adf27084174"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 14, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8258),
                            EmployeeId = new Guid("d78fbbe4-7447-4d05-833c-5eeb3950e0d5"),
                            ProjectId = new Guid("97d74d89-f2db-4cf9-b4c4-1d2d52ded14e"),
                            TaskDescription = "Редизайн ИС по проекту Смарт-Решения",
                            TaskFinishData = new DateTime(2023, 7, 8, 19, 41, 23, 972, DateTimeKind.Local).AddTicks(8262),
                            TaskStatus = "Stopped",
                            TaskTimeSpent = "5 ч",
                            TaskTitle = "Разработка ИС",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 22, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8259)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TeamDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TeamTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9e1257c8-00d1-4ba9-80af-f84b8e29431a"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8744),
                            TeamDescription = "Команда укомлектована аналитиком",
                            TeamTitle = "Команда по проекту Экосистем",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8745)
                        },
                        new
                        {
                            Id = new Guid("1c29869d-49e6-4a8e-a1eb-8773497e80fe"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8749),
                            TeamDescription = "Команда укомлектована дизайнером",
                            TeamTitle = "Команда по проекту Энергопроект",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8749)
                        },
                        new
                        {
                            Id = new Guid("f97fab25-21de-44cb-b6c2-5f1db493d614"),
                            CreatedBy = "System",
                            CreatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8751),
                            TeamDescription = "Команда укомлектована аналитиком",
                            TeamTitle = "Команда по проекту Смарт-Решения",
                            UpdatedBy = "System",
                            UpdatedOn = new DateTime(2023, 5, 24, 16, 41, 23, 972, DateTimeKind.Utc).AddTicks(8751)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f3bd501d-6647-4f51-95ce-412ae3552ed9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "340aa380-03c4-45ab-a8e9-196e2d29f984",
                            Email = "admin@admin",
                            EmailConfirmed = false,
                            FirstName = "admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ADMIN",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEKEDcwyDbzgtKJayFDqQtjqdc30H1/pBn4BLjKi4P7GA7MNO0TyymjLTrruZdjEzDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "WCBIVXTPLTZ57TRN53RAKPY6EM6V62CL",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "f3bd501d-6647-4f51-95ce-412ae3552ee9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c9a74009-ca76-4231-bad5-39b8f7663830",
                            Email = "ravil@mail.com",
                            EmailConfirmed = false,
                            FirstName = "Ravil",
                            LockoutEnabled = false,
                            NormalizedEmail = "RAVIL@MAIL.COM",
                            NormalizedUserName = "RAVIL",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQrxMoeM/bI2Dtkpe/zkgr2QAQwRx1HZIkpBuqXBbgtsRfvB9dSgxBnATU0gSZQeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "HR2DKDZZFCG555WQRJVEUZ4CMPVQPDSX",
                            TwoFactorEnabled = false,
                            UserName = "Ravil"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.HasOne("Domain.Entities.Customer", "Customer")
                        .WithMany("Contracts")
                        .HasForeignKey("CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany("Employees")
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.HasOne("Domain.Entities.Contract", "Contract")
                        .WithMany("Projects")
                        .HasForeignKey("ContractId");

                    b.HasOne("Domain.Entities.Team", "Team")
                        .WithMany("Projects")
                        .HasForeignKey("TeamId");

                    b.Navigation("Contract");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("Domain.Entities.Employee", "Employee")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("Domain.Entities.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectId");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Contract", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("Domain.Entities.Customer", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Domain.Entities.Employee", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("Domain.Entities.Project", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("Domain.Entities.Team", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
